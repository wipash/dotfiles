<#
.SYNOPSIS
  Simplified Chezmoi template to generate a merged Kubernetes config file.
  Retrieves individual kubeconfig files from 1Password based on sources
  defined in .chezmoidata.yaml and merges them using kubectl.

.DESCRIPTION
  This script is processed by chezmoi. It iterates through the
  'kubeconfig_onepassword_sources' array in the chezmoi data file.
  For each entry, it embeds the kubeconfig content fetched via 'onepasswordRead'.
  When executed by chezmoi, the script saves these embedded configs to temporary
  files and then uses 'kubectl config view --flatten' to produce a merged
  kubeconfig, outputting it to stdout. This output becomes the content of the
  target file (e.g., ~/.kube/config). Temporary files are cleaned up.
  This version assumes sources exist and are valid.

.NOTES
  Requires:
  - chezmoi
  - 1Password CLI (op) configured for chezmoi access
  - kubectl command available in PATH
  - PowerShell
  - Assumes 'kubeconfig_onepassword_sources' exists and is populated in chezmoi data.
  - Assumes 'onepasswordRead' returns valid kubeconfig content for each source.

.EXAMPLE
  # In your chezmoi source directory:
  # Create a file named private_dot_kube/config.ps1.tmpl with this content.
  # Add the data structure to .chezmoidata.yaml.
  # Run: chezmoi apply
#>
param()

# Basic error handling
$ErrorActionPreference = 'Stop'
$VerbosePreference = $Global:VerbosePreference

# Initialize lists
$tempFiles = [System.Collections.Generic.List[string]]::new()
$kubectlArgs = [System.Collections.Generic.List[string]]::new()

try {
    Write-Verbose "Starting simplified kubeconfig merge process."

    # Check if kubectl command is available
    if (-not (Get-Command kubectl -ErrorAction SilentlyContinue)) {
        throw "kubectl command not found in PATH. Please ensure kubectl is installed."
    }

    # --- Template Section: Retrieve Kubeconfigs ---
    {{- range $index, $source := .kubeconfig_onepassword_sources }}

    # Define variable name and fetch content
    ${kubeconfigContent_{{ $index }}} = @'
{{- onepasswordRead $source.path -}}
'@

    Write-Verbose "Processing source {{ $index }}: Path '{{ $source.path }}'"

    # --- PowerShell Section: Process Retrieved Kubeconfig ---
    $currentContent = Get-Variable -Name "kubeconfigContent_{{ $index }}" -ValueOnly

    # Create a temporary file
    try {
        $tempFile = New-TemporaryFile
    } catch {
        throw "Failed to create temporary file: $($_.Exception.Message)"
    }
    $tempFilePath = $tempFile.FullName
    $tempFiles.Add($tempFilePath)

    # Add the --kubeconfig argument
    $kubectlArgs.Add("--kubeconfig")
    $kubectlArgs.Add($tempFilePath)

    Write-Verbose "Saving kubeconfig for source {{ $index }} to temporary file: $tempFilePath"
    try {
        # Write content to temp file
        Out-File -FilePath $tempFilePath -InputObject $currentContent -Encoding utf8NoBOM -NoNewline
    } catch {
        throw "Failed to write to temporary file '$tempFilePath': $($_.Exception.Message)"
    }

    {{- end }} # End of Go template range loop

    # --- PowerShell Section: Merge Kubeconfigs ---

    # Construct the kubectl command arguments
    $cmdArgs = @('config', 'view', '--flatten') + $kubectlArgs

    Write-Verbose "Merging kubeconfigs using: kubectl $($cmdArgs -join ' ')"

    # Execute kubectl and capture the merged output
    try {
        $mergedConfig = kubectl $cmdArgs 2>&1 # Capture stderr as well
        if ($LASTEXITCODE -ne 0) {
            throw "kubectl config view command failed. Exit code: $LASTEXITCODE. Output/Error: $mergedConfig"
        }
    } catch {
        throw "Failed to execute kubectl merge command: $($_.Exception.Message)"
    }

    # Output the final merged config
    Write-Output $mergedConfig

} catch {
    Write-Error "An error occurred during kubeconfig generation: $($_.Exception.Message)"
    exit 1
} finally {
    # --- PowerShell Section: Cleanup ---
    Write-Verbose "Cleaning up temporary files..."
    foreach ($file in $tempFiles) {
        if (Test-Path $file) {
            Write-Verbose "Removing temporary file: $file"
            try {
                Remove-Item $file -Force -ErrorAction Stop
            } catch {
                Write-Warning "Failed to remove temporary file '$file': $($_.Exception.Message)"
            }
        }
    }
    Write-Verbose "Kubeconfig merge process finished."
}

exit 0
