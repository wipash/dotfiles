$env:STARSHIP_CONFIG = "$HOME\AppData\Local\starship\starship.toml"

# Hide python venv name
$env:VIRTUAL_ENV_DISABLE_PROMPT = 1

# Exit with Ctrl+D
Set-PSReadLineKeyHandler -Key ctrl+d -Function DeleteCharOrExit

# If PowerShell module path doesn't exist, create it "%LocalAppData%/powershell/Modules"
if (!(Test-Path -Path "$env:LOCALAPPDATA\powershell\Modules")) {
    New-Item -ItemType Directory -Path "$env:LOCALAPPDATA\powershell\Modules" -Force
}

# If OneDrive PS module path is not a junction, or is but points to the wrong place, remove it and create a new junction
#  OneDrive path: "$ENV:OneDrive\Documents\PowerShell\Modules"
#  Junction target: "$env:LOCALAPPDATA\powershell\Modules"
if (!((Get-Item -Path "$ENV:OneDrive\Documents\PowerShell\Modules").LinkType -eq 'Junction')) {
    if (Test-Path -Path "$ENV:OneDrive\Documents\PowerShell\Modules") {
        Remove-Item -Path "$ENV:OneDrive\Documents\PowerShell\Modules" -Force -Recurse
    }
    New-Item -ItemType Junction -Path "$ENV:OneDrive\Documents\PowerShell\Modules" -Target "$env:LOCALAPPDATA\powershell\Modules" -Force
}

# https://github.com/starship/starship/issues/2057#issuecomment-831336770
&"$HOME\AppData\Local\starship\starship.exe" init powershell --print-full-init | Out-String | Invoke-Expression

Set-Alias do-upgrade-all $HOME\Documents\WindowsPowerShell\do-upgrade-all.ps1

function Ensure-Path {
    $env:Path = [System.Environment]::GetEnvironmentVariable('Path','Machine') + ';' + [System.Environment]::GetEnvironmentVariable('Path','User')
}

Set-Alias ensurepath Ensure-Path

# WSL Interop (https://github.com/mikebattista/PowerShell-WSL-Interop)
# Installation: Install-Module WslInterop -Scope CurrentUser -Force
# Import-WslCommand "cat", "cp", "echo", "find", "grep", "head", "ls", "mv", "rm", "sed", "touch", "tree", "which"

. $HOME\Documents\WindowsPowerShell\completions\_chezmoi.ps1

{{ if (lookPath "az") -}}
Register-ArgumentCompleter -Native -CommandName az -ScriptBlock {
    param($commandName, $wordToComplete, $cursorPosition)
    $completion_file = New-TemporaryFile
    $env:ARGCOMPLETE_USE_TEMPFILES = 1
    $env:_ARGCOMPLETE_STDOUT_FILENAME = $completion_file
    $env:COMP_LINE = $wordToComplete
    $env:COMP_POINT = $cursorPosition
    $env:_ARGCOMPLETE = 1
    $env:_ARGCOMPLETE_SUPPRESS_SPACE = 0
    $env:_ARGCOMPLETE_IFS = "`n"
    $env:_ARGCOMPLETE_SHELL = 'powershell'
    az 2>&1 | Out-Null
    Get-Content $completion_file | Sort-Object | ForEach-Object {
        [System.Management.Automation.CompletionResult]::new($_, $_, "ParameterValue", $_)
    }
    Remove-Item $completion_file, Env:\_ARGCOMPLETE_STDOUT_FILENAME, Env:\ARGCOMPLETE_USE_TEMPFILES, Env:\COMP_LINE, Env:\COMP_POINT, Env:\_ARGCOMPLETE, Env:\_ARGCOMPLETE_SUPPRESS_SPACE, Env:\_ARGCOMPLETE_IFS, Env:\_ARGCOMPLETE_SHELL
}
{{- end }}
